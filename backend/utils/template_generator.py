"""
Excel template generator for new uGrid projects
Creates properly formatted Excel files for data input
"""

import pandas as pd
from datetime import datetime
from typing import Dict, List, Any, Optional
import io

class TemplateGenerator:
    """Generate Excel templates for new projects"""
    
    def __init__(self):
        self.template_version = "1.0"
        self.created_date = datetime.now()
    
    def generate_template(
        self,
        project_name: str = "New_Project",
        include_sample_data: bool = False
    ) -> io.BytesIO:
        """
        Generate a complete Excel template for uGrid projects
        
        Args:
            project_name: Name of the project
            include_sample_data: Whether to include sample data rows
            
        Returns:
            BytesIO object containing the Excel file
        """
        output = io.BytesIO()
        
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            # Get workbook for formatting
            workbook = writer.book
            
            # Define formats
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D3D3D3',
                'border': 1
            })
            
            # 1. PoleClasses sheet
            poles_data = self._create_poles_template(include_sample_data)
            poles_df = pd.DataFrame(poles_data)
            poles_df.to_excel(writer, sheet_name='PoleClasses', index=False)
            
            # 2. Connections sheet
            connections_data = self._create_connections_template(include_sample_data)
            connections_df = pd.DataFrame(connections_data)
            connections_df.to_excel(writer, sheet_name='Connections', index=False)
            
            # 3. NetworkLength sheet (MV/LV conductors)
            network_data = self._create_network_template(include_sample_data)
            network_df = pd.DataFrame(network_data)
            network_df.to_excel(writer, sheet_name='NetworkLength', index=False)
            
            # 4. DropLines sheet
            droplines_data = self._create_droplines_template(include_sample_data)
            droplines_df = pd.DataFrame(droplines_data)
            droplines_df.to_excel(writer, sheet_name='DropLines', index=False)
            
            # 5. Transformers sheet
            transformers_data = self._create_transformers_template(include_sample_data)
            transformers_df = pd.DataFrame(transformers_data)
            transformers_df.to_excel(writer, sheet_name='Transformers', index=False)
            
            # 6. Generation sheet (optional, for explicit generation points)
            generation_data = self._create_generation_template(include_sample_data)
            generation_df = pd.DataFrame(generation_data)
            generation_df.to_excel(writer, sheet_name='Generation', index=False)
            
            # 7. Metadata sheet
            metadata_data = {
                'Property': [
                    'Project Name',
                    'Template Version',
                    'Created Date',
                    'Site Code',
                    'Country',
                    'Region',
                    'Designer',
                    'Notes'
                ],
                'Value': [
                    project_name,
                    self.template_version,
                    self.created_date.strftime('%Y-%m-%d'),
                    '',
                    '',
                    '',
                    '',
                    'Generated by 1PWR Grid Platform'
                ]
            }
            metadata_df = pd.DataFrame(metadata_data)
            metadata_df.to_excel(writer, sheet_name='Metadata', index=False)
            
            # Add column descriptions sheet
            descriptions_data = self._create_column_descriptions()
            desc_df = pd.DataFrame(descriptions_data)
            desc_df.to_excel(writer, sheet_name='Column_Descriptions', index=False)
            
            # Format sheets
            for sheet_name in writer.sheets:
                worksheet = writer.sheets[sheet_name]
                worksheet.set_column('A:Z', 15)  # Set column width
        
        output.seek(0)
        return output
    
    def _create_poles_template(self, include_sample: bool) -> Dict[str, List]:
        """Create PoleClasses sheet template"""
        template = {
            'ID': [],
            'GPS_Y': [],
            'GPS_X': [],
            'Type': [],
            'AngleClass': [],
            'St_code_1': [],
            'St_code_2': [],
            'Height': [],
            'Material': [],
            'Foundation': [],
            'InstallDate': [],
            'Team': [],
            'Notes': []
        }
        
        if include_sample:
            template['ID'] = ['SITE_01_AA1', 'SITE_01_AA2', 'SITE_01_AA3']
            template['GPS_Y'] = [-29.532, -29.533, -29.534]
            template['GPS_X'] = [27.886, 27.887, 27.888]
            template['Type'] = ['INTERMEDIATE', 'INTERMEDIATE', 'ANGLE']
            template['AngleClass'] = ['0-15', '0-15', '15-30']
            template['St_code_1'] = [0, 0, 0]
            template['St_code_2'] = ['NA', 'NA', 'SP']
            template['Height'] = [9, 9, 11]
            template['Material'] = ['WOOD', 'WOOD', 'CONCRETE']
            template['Foundation'] = ['PLANTED', 'PLANTED', 'CONCRETE']
            template['InstallDate'] = ['', '', '']
            template['Team'] = ['', '', '']
            template['Notes'] = ['', '', 'Stay wire planned']
        
        return template
    
    def _create_connections_template(self, include_sample: bool) -> Dict[str, List]:
        """Create Connections sheet template"""
        template = {
            'Survey ID': [],
            'GPS_Y': [],
            'GPS_X': [],
            'Customer': [],
            'Type': [],
            'St_code_3': [],
            'Meter_Number': [],
            'Meter_Type': [],
            'Contract': [],
            'Load_kW': [],
            'Phase': [],
            'InstallDate': [],
            'Notes': []
        }
        
        if include_sample:
            template['Survey ID'] = ['SITE 001 HH1', 'SITE 002 HH1', 'SITE 003 SME1']
            template['GPS_Y'] = [-29.5321, -29.5331, -29.5341]
            template['GPS_X'] = [27.8861, 27.8871, 27.8881]
            template['Customer'] = ['John Doe', 'Jane Smith', 'Local Shop']
            template['Type'] = ['HOUSEHOLD', 'HOUSEHOLD', 'SME']
            template['St_code_3'] = [0, 0, 0]
            template['Meter_Number'] = ['', '', '']
            template['Meter_Type'] = ['PREPAID', 'PREPAID', 'POSTPAID']
            template['Contract'] = ['SIGNED', 'PENDING', 'SIGNED']
            template['Load_kW'] = [1.5, 1.5, 3.0]
            template['Phase'] = ['SINGLE', 'SINGLE', 'THREE']
            template['InstallDate'] = ['', '', '']
            template['Notes'] = ['', '', 'Commercial customer']
        
        return template
    
    def _create_network_template(self, include_sample: bool) -> Dict[str, List]:
        """Create NetworkLength sheet template (MV/LV conductors)"""
        template = {
            'Type': [],
            'Node 1': [],
            'Node 2': [],
            'Length': [],
            'Conductor_Spec': [],
            'St_code_4': [],
            'Sag': [],
            'Tension': [],
            'InstallDate': [],
            'Team': [],
            'Notes': []
        }
        
        if include_sample:
            template['Type'] = ['MV', 'MV', 'LV', 'LV']
            template['Node 1'] = ['SITE_01_M1', 'SITE_01_M2', 'SITE_01_AA1', 'SITE_01_AA2']
            template['Node 2'] = ['SITE_01_M2', 'SITE_01_M3', 'SITE_01_AA2', 'SITE_01_AA3']
            template['Length'] = [150.5, 200.3, 45.2, 50.7]
            template['Conductor_Spec'] = ['50mm2_AL', '50mm2_AL', '35mm2_AL', '35mm2_AL']
            template['St_code_4'] = [0, 0, 0, 0]
            template['Sag'] = [2.5, 3.0, 1.2, 1.3]
            template['Tension'] = [1500, 1600, 800, 850]
            template['InstallDate'] = ['', '', '', '']
            template['Team'] = ['', '', '', '']
            template['Notes'] = ['Main backbone', '', '', '']
        
        return template
    
    def _create_droplines_template(self, include_sample: bool) -> Dict[str, List]:
        """Create DropLines sheet template"""
        template = {
            'Node 1': [],
            'Node 2': [],
            'Length': [],
            'Type': [],
            'St_code_4': [],
            'Conductor_Spec': [],
            'InstallDate': [],
            'Team': [],
            'Notes': []
        }
        
        if include_sample:
            template['Node 1'] = ['SITE_01_AA1', 'SITE_01_AA2', 'SITE_01_AA3']
            template['Node 2'] = ['SITE 001 HH1', 'SITE 002 HH1', 'SITE 003 SME1']
            template['Length'] = [15.5, 18.2, 22.3]
            template['Type'] = ['DROP', 'DROP', 'DROP']
            template['St_code_4'] = [0, 0, 0]
            template['Conductor_Spec'] = ['16mm2_AL', '16mm2_AL', '25mm2_AL']
            template['InstallDate'] = ['', '', '']
            template['Team'] = ['', '', '']
            template['Notes'] = ['', '', 'Three-phase drop']
        
        return template
    
    def _create_transformers_template(self, include_sample: bool) -> Dict[str, List]:
        """Create Transformers sheet template"""
        template = {
            'ID': [],
            'Pole_ID': [],
            'SubNetwork': [],
            'Rating_kVA': [],
            'Type': [],
            'Phases': [],
            'Primary_V': [],
            'Secondary_V': [],
            'St_code_5': [],
            'Serial_Number': [],
            'Manufacturer': [],
            'InstallDate': [],
            'CommissionDate': [],
            'Notes': []
        }
        
        if include_sample:
            template['ID'] = ['TRF_001', 'TRF_002']
            template['Pole_ID'] = ['SITE_01_M3', 'SITE_01_M10']
            template['SubNetwork'] = ['SUBNET_A', 'SUBNET_B']
            template['Rating_kVA'] = [100, 50]
            template['Type'] = ['POLE_MOUNTED', 'POLE_MOUNTED']
            template['Phases'] = ['THREE', 'THREE']
            template['Primary_V'] = [11000, 11000]
            template['Secondary_V'] = [400, 400]
            template['St_code_5'] = [0, 0]
            template['Serial_Number'] = ['', '']
            template['Manufacturer'] = ['', '']
            template['InstallDate'] = ['', '']
            template['CommissionDate'] = ['', '']
            template['Notes'] = ['Main transformer', 'Secondary transformer']
        
        return template
    
    def _create_generation_template(self, include_sample: bool) -> Dict[str, List]:
        """Create Generation sheet template for explicit generation points"""
        template = {
            'ID': [],
            'Name': [],
            'GPS_Y': [],
            'GPS_X': [],
            'Type': [],
            'Capacity_kW': [],
            'Connection_Pole': [],
            'St_code_5': [],
            'CommissionDate': [],
            'Notes': []
        }
        
        if include_sample:
            template['ID'] = ['GEN_001']
            template['Name'] = ['Main Substation']
            template['GPS_Y'] = [-29.535]
            template['GPS_X'] = [27.890]
            template['Type'] = ['SUBSTATION']
            template['Capacity_kW'] = [500]
            template['Connection_Pole'] = ['SITE_01_M1']
            template['St_code_5'] = [6]  # Operational
            template['CommissionDate'] = ['2024-01-15']
            template['Notes'] = ['11kV feed from utility']
        
        return template
    
    def _create_column_descriptions(self) -> Dict[str, List]:
        """Create column descriptions for reference"""
        return {
            'Sheet': [
                'PoleClasses', 'PoleClasses', 'PoleClasses', 'PoleClasses', 'PoleClasses',
                'Connections', 'Connections', 'Connections',
                'NetworkLength', 'NetworkLength', 'NetworkLength',
                'DropLines', 'DropLines',
                'Transformers', 'Transformers',
                'Generation', 'Generation'
            ],
            'Column': [
                'ID', 'GPS_Y', 'GPS_X', 'St_code_1', 'St_code_2',
                'Survey ID', 'St_code_3', 'Type',
                'Type', 'Node 1', 'Node 2',
                'Node 1', 'Node 2',
                'Pole_ID', 'Rating_kVA',
                'Connection_Pole', 'Capacity_kW'
            ],
            'Description': [
                'Unique pole identifier (e.g., SITE_01_AA1)',
                'Latitude (decimal degrees)',
                'Longitude (decimal degrees)',
                'Pole construction progress (0-9)',
                'Further pole progress (NA, SP, SI, KP, KI, TP, TI, TC, MP, MI, MC, EP, EI)',
                'Unique connection identifier (e.g., SITE 001 HH1)',
                'Connection/meter status (0-10)',
                'Connection type (HOUSEHOLD, SME, INSTITUTION)',
                'Conductor type (MV, LV)',
                'Starting pole/connection ID',
                'Ending pole/connection ID',
                'Pole ID where drop originates',
                'Connection ID where drop terminates',
                'Pole where transformer is mounted',
                'Transformer rating in kVA',
                'Pole where generation connects',
                'Generation capacity in kW'
            ],
            'Required': [
                'Yes', 'Yes', 'Yes', 'No', 'No',
                'Yes', 'No', 'Yes',
                'Yes', 'Yes', 'Yes',
                'Yes', 'Yes',
                'Yes', 'Yes',
                'Yes', 'Yes'
            ]
        }
    
    def generate_status_code_reference(self) -> pd.DataFrame:
        """Generate a reference sheet for status codes"""
        status_codes = {
            'Code_Type': [],
            'Value': [],
            'Description': [],
            'Category': []
        }
        
        # St_code_1 (Pole Construction)
        for i in range(10):
            status_codes['Code_Type'].append('St_code_1')
            status_codes['Value'].append(str(i))
            status_codes['Category'].append('Pole Construction')
            
        status_codes['Description'].extend([
            'uGridNET output (as designed)',
            'Updated planned location',
            'Marked with label onsite',
            'Consent withheld',
            'Consented',
            'Hard Rock',
            'Excavated',
            'Pole planted',
            'Poletop dressed',
            'Conductor attached'
        ])
        
        # St_code_2 (Further Pole Progress)
        st2_codes = ['NA', 'SP', 'SI', 'KP', 'KI', 'TP', 'TI', 'TC', 'MP', 'MI', 'MC', 'EP', 'EI']
        st2_desc = [
            'None',
            'Stay wires planned',
            'Stay wires installed',
            'Kicker pole planned',
            'Kicker pole installed',
            'Transformer planned',
            'Transformer installed',
            'Transformer commissioned',
            'Meter planned',
            'Meter installed',
            'Meter commissioned',
            'Earth planned',
            'Earth installed'
        ]
        
        for code, desc in zip(st2_codes, st2_desc):
            status_codes['Code_Type'].append('St_code_2')
            status_codes['Value'].append(code)
            status_codes['Description'].append(desc)
            status_codes['Category'].append('Pole Additional')
        
        # St_code_3 (Connection Status)
        for i in range(11):
            status_codes['Code_Type'].append('St_code_3')
            status_codes['Value'].append(str(i))
            status_codes['Category'].append('Connection/Meter')
            
        status_codes['Description'].extend([
            'No connection',
            'Connection planned',
            'Connection surveyed',
            'Customer contracted',
            'Payment received',
            'Materials procured',
            'Installation scheduled',
            'Drop line installed',
            'Meter installed',
            'Meter commissioned',
            'Service active'
        ])
        
        # St_code_4 (Conductor Status)
        for i in range(6):
            status_codes['Code_Type'].append('St_code_4')
            status_codes['Value'].append(str(i))
            status_codes['Category'].append('Conductor/Line')
            
        status_codes['Description'].extend([
            'Not strung',
            'Materials on site',
            'Stringing started',
            'String in progress',
            'String tensioned',
            'String complete'
        ])
        
        # St_code_5 (Generation/Transformer)
        for i in range(7):
            status_codes['Code_Type'].append('St_code_5')
            status_codes['Value'].append(str(i))
            status_codes['Category'].append('Generation/Transformer')
            
        status_codes['Description'].extend([
            'Not installed',
            'Foundation ready',
            'Equipment delivered',
            'Installation started',
            'Installation complete',
            'Commissioned',
            'Operational'
        ])
        
        return pd.DataFrame(status_codes)
